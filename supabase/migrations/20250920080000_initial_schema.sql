-- Create the schema for the Konnect application

-- Profiles Table (linked to auth.users)
CREATE TABLE public.profiles (
    id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username TEXT NOT NULL UNIQUE,
    full_name TEXT,
    role TEXT DEFAULT 'buyer',
    is_verified_seller BOOLEAN DEFAULT FALSE,
    verification_nft_mint TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to update the updated_at column
CREATE OR REPLACE FUNCTION public.trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to the profiles table
CREATE TRIGGER set_profiles_timestamp
BEFORE UPDATE ON public.profiles
FOR EACH ROW
EXECUTE PROCEDURE public.trigger_set_timestamp();

-- Function to create a profile for a new user
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'username');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to create a profile when a new user signs up
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE PROCEDURE public.handle_new_user();


-- Marketplaces Table
CREATE TABLE public.marketplaces (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    created_by UUID NOT NULL REFERENCES public.profiles(id),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_marketplaces_timestamp BEFORE UPDATE ON public.marketplaces FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- Listings Table
CREATE TABLE public.listings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL,
    category TEXT,
    marketplace_id BIGINT NOT NULL REFERENCES public.marketplaces(id),
    user_id UUID NOT NULL REFERENCES public.profiles(id),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_listings_timestamp BEFORE UPDATE ON public.listings FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- Orders Table
CREATE TABLE public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    buyer_id UUID NOT NULL REFERENCES public.profiles(id),
    seller_id UUID NOT NULL REFERENCES public.profiles(id),
    listing_id BIGINT NOT NULL REFERENCES public.listings(id),
    quantity INTEGER DEFAULT 1,
    total_amount REAL NOT NULL,
    delivery_address TEXT,
    notes TEXT,
    escrow_tx_hash TEXT,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_orders_timestamp BEFORE UPDATE ON public.orders FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- User Reviews Table
CREATE TABLE public.user_reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reviewer_id UUID NOT NULL REFERENCES public.profiles(id),
    reviewed_user_id UUID NOT NULL REFERENCES public.profiles(id),
    rating INTEGER NOT NULL,
    comment TEXT,
    order_id BIGINT REFERENCES public.orders(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_user_reviews_timestamp BEFORE UPDATE ON public.user_reviews FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- User Wishlist Table
CREATE TABLE public.user_wishlist (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id),
    listing_id BIGINT NOT NULL REFERENCES public.listings(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, listing_id)
);

-- Listing Images Table
CREATE TABLE public.listing_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    listing_id BIGINT NOT NULL REFERENCES public.listings(id),
    filename TEXT NOT NULL,
    original_filename TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER NOT NULL,
    mime_type TEXT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Messages Table
CREATE TABLE public.messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id UUID NOT NULL REFERENCES public.profiles(id),
    recipient_id UUID NOT NULL REFERENCES public.profiles(id),
    listing_id BIGINT REFERENCES public.listings(id),
    subject TEXT,
    content TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Purchases Table
CREATE TABLE public.purchases (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id),
    listing_id BIGINT NOT NULL REFERENCES public.listings(id),
    amount REAL NOT NULL,
    status TEXT DEFAULT 'pending',
    payment_method TEXT,
    transaction_hash TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_purchases_timestamp BEFORE UPDATE ON public.purchases FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- User Activities Table
CREATE TABLE public.user_activities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(id),
    activity_type TEXT NOT NULL,
    target_id BIGINT,
    target_type TEXT,
    activity_data TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Marketplace Requests Table
CREATE TABLE public.marketplace_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    university_name TEXT NOT NULL,
    university_domain TEXT NOT NULL,
    contact_email TEXT NOT NULL,
    description TEXT,
    status TEXT DEFAULT 'pending',
    requested_by UUID NOT NULL REFERENCES public.profiles(id),
    smart_contract_tx_hash TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE TRIGGER set_marketplace_requests_timestamp BEFORE UPDATE ON public.marketplace_requests FOR EACH ROW EXECUTE PROCEDURE public.trigger_set_timestamp();

-- Enable Row Level Security for all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.marketplaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.listings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_wishlist ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.listing_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.purchases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.marketplace_requests ENABLE ROW LEVEL SECURITY;

-- Basic RLS Policies (you should customize these)
CREATE POLICY "Enable read access for all users" ON public.marketplaces FOR SELECT USING (true);
CREATE POLICY "Enable read access for all users" ON public.listings FOR SELECT USING (true);
CREATE POLICY "Users can manage their own profiles" ON public.profiles FOR ALL USING (auth.uid() = id);
CREATE POLICY "Users can manage their own marketplaces" ON public.marketplaces FOR ALL USING (auth.uid() = created_by);
CREATE POLICY "Users can manage their own listings" ON public.listings FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage their own orders" ON public.orders FOR ALL USING (auth.uid() = buyer_id OR auth.uid() = seller_id);
CREATE POLICY "Users can manage their own reviews" ON public.user_reviews FOR ALL USING (auth.uid() = reviewer_id);
CREATE POLICY "Users can manage their own wishlist" ON public.user_wishlist FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage their own listing images" ON public.listing_images FOR ALL USING (auth.uid() IN (SELECT user_id FROM listings WHERE id = listing_id));
CREATE POLICY "Users can manage their own messages" ON public.messages FOR ALL USING (auth.uid() = sender_id OR auth.uid() = recipient_id);
CREATE POLICY "Users can manage their own purchases" ON public.purchases FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage their own activities" ON public.user_activities FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Users can manage their own marketplace requests" ON public.marketplace_requests FOR ALL USING (auth.uid() = requested_by);

